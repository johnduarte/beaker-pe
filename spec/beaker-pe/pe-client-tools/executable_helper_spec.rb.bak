require 'spec_helper'
require 'beaker'

#{{{
class MockResult
  def initialize(value)
    @value = value
  end
  def stdout
    return @value
  end
end

describe Beaker::DSL::PEClientTools::ExecutableHelper::Private do
  describe "#get_tools_bin_path" do
    context "when Windows" do
      it "returns C:\\ProgramData\\Puppet Labs\\Client\\tools\\bin" do
        platform =  { :platform => Beaker::Platform.new('windows-2012r2-x86_64') }
        host =  Beaker::Host.create('host', platform, make_host_opts('host', platform))
        allow(host).to receive(:exec).and_return(MockResult.new('C:\ProgramData'))
        expect(subject.get_tools_bin_path(host)).to eq('C:\\ProgramData\\Puppet Labs\\Client\\tools\\bin')
      end
    end
    context "when RHEL-7" do
      it "returns /opt/puppetlabs/client-tools/bin" do
        platform =  { :platform => Beaker::Platform.new('el-7-x86_64') }
        host =  Beaker::Host.create('host', platform, make_host_opts('host', platform))
        #allow(host).to receive(:exec).and_return(MockResult.new('C:\ProgramData'))
        expect(subject.get_tools_bin_path(host)).to eq('/opt/puppetlabs/client-tools/bin')
      end
    end
  end
end
#}}}

describe Beaker::DSL::PEClientTools::ExecutableHelper do
  before do
    @object = Object.new
    @object.extend(Beaker::DSL::PEClientTools::ExecutableHelper)
  end

  let(:method_name)   { "puppet_#{tool}_on"}

  shared_examples 'pe-client-tool'do

    it 'has a method to execute the tool' do
      expect(@object).to respond_to(method_name)
    end
  end

  context 'puppet-code' do
    let(:tool) {'code'}

    it_behaves_like 'pe-client-tool'
    #{{{
      context 'on el-7' do
        it 'has a PATH of /opt/puppetlabs/clienttools' do
          platform =  { :platform => Beaker::Platform.new('el-7-x86_64') }
          host =  Beaker::Host.create('host', platform, make_host_opts('host', platform))
          allow(host).to receive(:exec)
          expect(host).to receive(:build_win_batch_command).never
          expect(Beaker::Command).to receive(:new).with("/opt/puppetlabs/client-tools/bin/puppet-code", [], { :cmdexe => true})
          expect(@object.send(method_name, host))
        end
      end
    context 'on windows' do
      it 'has a PATH of %PROGRAMFILES%\Puppet Labs\Client tools\bin' do
          platform =  { :platform => Beaker::Platform.new('windows-2012r2-x86_64') }
          host =  Beaker::Host.create('host', platform, make_host_opts('host', platform))
          allow(host).to receive(:exec).and_return(MockResult.new('C:\ProgramData'))
          expect(host).to receive(:build_win_batch_command)
          expect(@object).to receive(:create_remote_file).with(host,/ProgramData/i, 'some file content')
          expect(Beaker::Command).to receive(:new).with("echo", ["%PROGRAMFILES%"], {:cmdexe=>true})
          expect(@object.send(method_name, host))
      end
    end
      #}}}
  end

  context 'puppet-access' do
    let(:tool) {'access'}

    it_behaves_like 'pe-client-tool'
  end

  context 'puppet-job' do
    let(:tool) {'job'}

    it_behaves_like 'pe-client-tool'
  end

  context 'puppet-app' do
    let(:tool) {'app'}

    it_behaves_like 'pe-client-tool'
  end

  context 'puppet-db' do
    let(:tool) {'db'}

    it_behaves_like 'pe-client-tool'
  end

  context 'puppet-query' do
    let(:tool) {'query'}

    it_behaves_like 'pe-client-tool'
  end

  it 'has a method to login with puppet access' do
    expect(@object).to respond_to('login_with_puppet_access_on')
  end
end
